# SPDX-FileCopyrightText: 2021 Philipp Basler, Margarete Mühlleitner and Jonas Müller
#
# SPDX-License-Identifier: GPL-3.0-or-later

add_subdirectory(minimizer)
add_subdirectory(models)
if(BSMPTCompileBaryo)
  add_subdirectory(baryo_calculation)
  add_subdirectory(WallThickness)
  add_subdirectory(Kfactors)
endif(BSMPTCompileBaryo)
add_subdirectory(ThermalFunctions)


#==============================Utility==================================

add_subdirectory(utility)



#==============================EXE======================================

add_executable(BSMPT prog/BSMPT.cpp)
target_link_libraries(BSMPT Minimizer Models Utility)
target_compile_features(BSMPT PUBLIC cxx_std_14)

add_executable(VEVEVO prog/VEVEVO.cpp)
target_link_libraries(VEVEVO Minimizer Models Utility)
target_compile_features(VEVEVO PUBLIC cxx_std_14)

add_executable(NLOVEV prog/NLOVEV.cpp)
target_link_libraries(NLOVEV Minimizer Models Utility)
target_compile_features(NLOVEV PUBLIC cxx_std_14)

add_executable(CalcCT prog/CalcCT.cpp)
target_link_libraries(CalcCT Models Utility)
target_compile_features(CalcCT PUBLIC cxx_std_14)

add_executable(TripleHiggsCouplingsNLO prog/TripleHiggsNLO.cpp)
target_link_libraries(TripleHiggsCouplingsNLO Models Utility)
target_compile_features(TripleHiggsCouplingsNLO PUBLIC cxx_std_14)

add_executable(Test prog/Test.cpp)
target_link_libraries(Test Minimizer Models Utility)
target_compile_features(Test PUBLIC cxx_std_14)



if(BSMPTCompileBaryo)
add_executable(CalculateEWBG prog/CalculateEWBG.cpp)
target_link_libraries(CalculateEWBG Minimizer Models Baryo Utility)
target_compile_features(CalculateEWBG PUBLIC cxx_std_14)
else(BSMPTCompileBaryo)
  message("CalculateEWBG will not compile as Boost is missing")
endif(BSMPTCompileBaryo)

if(BSMPTCompileBaryo)
add_executable(PlotEWBG_vw prog/PlotEWBG_vw.cpp)
target_link_libraries(PlotEWBG_vw Minimizer Models Baryo Utility)
target_compile_features(PlotEWBG_vw PUBLIC cxx_std_14)
else(BSMPTCompileBaryo)
  message("PlotEWBG_vw will not compile as Boost is missing")
endif(BSMPTCompileBaryo)

if(BSMPTCompileBaryo)
add_executable(PlotEWBG_nL prog/PlotEWBG_nL.cpp)
target_link_libraries(PlotEWBG_nL Minimizer Models Baryo Utility)
target_compile_features(PlotEWBG_nL PUBLIC cxx_std_14)
else(BSMPTCompileBaryo)
  message("PlotEWBG_nL will not compile as Boost is missing")
endif(BSMPTCompileBaryo)





#======================= Additional testing ====================================

if(MakeAdditionalTesting)

  if(BSMPTCompileBaryo)
    add_executable(CreateMuGrid prog/CreateMuGrid.cpp)
    target_link_libraries(CreateMuGrid Minimizer Models Baryo Utility)
    target_compile_features(CreateMuGrid PUBLIC cxx_std_14)
  else(BSMPTCompileBaryo)
    message("CreateMuGrid will not compile as Boost is missing")
  endif(BSMPTCompileBaryo)

  if(BSMPTCompileBaryo)
    add_executable(Kfactor_grid prog/Kfactor_grid.cpp)
    target_link_libraries(Kfactor_grid Minimizer Models Kfactors Utility)
    target_compile_features(Kfactor_grid PUBLIC cxx_std_14)
  else(BSMPTCompileBaryo)
    message("Kfactor_grid will not compile as Boost is missing")
  endif(BSMPTCompileBaryo)


endif(MakeAdditionalTesting)

